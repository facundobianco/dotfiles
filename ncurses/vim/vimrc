" Syntax highlighting
set t_Co=256
syntax enable

" mouse
set mouse=n

" Clipboard (into INSERT mode: C-R ")
set pastetoggle=<F3>
nnoremap Y y$

" tabs
" https://stackoverflow.com/a/1878983
set tabstop=8
set softtabstop=0
set expandtab
set shiftwidth=4
set smarttab
set autoindent

" backup / swap
set nobackup
set noswapfile

" shell (:r !command <opt>)
set shellcmdflag+=i

" search
set incsearch
set nohlsearch
noremap <silent> <F7> :set hlsearch!<CR>

" display the hidden characters
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»
highlight NonText ctermfg=DarkGrey
highlight SpecialKey ctermfg=DarkGrey
nnoremap <silent> <F4> :set list!<CR>
inoremap <silent> <F4> <C-O>:set list!<CR>

" Highlight unwanted spaces
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" Line numbering (show/hide: set invnumber)
set nu
set numberwidth=3
set cpoptions+=n
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE

" Statusline
set laststatus=2
" Statusline color
highlight StatusLine   cterm=NONE ctermbg=235  ctermfg=229
highlight StatusLineNC cterm=NONE ctermbg=235  ctermfg=238
highlight VertSplit    cterm=NONE ctermbg=NONE ctermfg=238
" Statusline content
set statusline=
set statusline+=\ 
set statusline+=\[%{mode()}\]
set statusline+=\[%n%H%M%R%W\]
set statusline+=\ %f
set statusline+=%15((L\:\ %l\ C\:\ %c)%)
set statusline+=\ %P
set statusline+=%= " right-align from now on
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ (%{&fileformat})
set statusline+=\ 

" netrw
noremap <silent> <F2> :Lexplore<CR>
autocmd BufEnter * if ( winnr("$") == 1 && &filetype ==# 'netrw' ) | q | endif
let g:netrw_banner=0
let g:netrw_winsize=-20
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_list_hide='^\.[^\.]*$'
let g:netrw_sort_options='i'
let g:netrw_special_syntax=1

" syntax for files
autocmd BufNewFile,BufRead ossec.conf set syntax=xml
autocmd BufNewFile,BufRead *_nagios2.cfg set filetype=nagios

" split (Ctrl-w s)
" https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
set splitbelow
set splitright

" tabs (leader = \)
nnoremap <leader>t :tabnew<CR>
nnoremap <leader>n :tabn<CR>
nnoremap <leader>p :tabp<CR>
highlight TabLineSel cterm=NONE ctermbg=DarkGrey ctermfg=Yellow
highlight TabLine cterm=NONE ctermbg=DarkGrey ctermfg=Black
highlight TabLineFill ctermfg=DarkGrey

" wrapped text: jumps to the next row in the editor (instead of the next line)
nnoremap <Down> gj
nnoremap <Up> gk

" quit easily
cnoreabbrev <silent> qq qall!

" split lines
" https://superuser.com/a/611420
function! BreakHere()
    s/^\(\s*\)\(.\{-}\)\(\s*\)\(\%#\)\(\s*\)\(.*\)/\1\2\r\1\4\6
    call histdel("/", -1)
endfunction
" BreakHere()
nnoremap j :<C-u>call BreakHere()<CR>

" modify selected text using combining diacritics
" http://vim.wikia.com/wiki/Create_underlines,_overlines,_and_strikethroughs_using_combining_characters
command! -range -nargs=0 Overline        call s:CombineSelection(<line1>, <line2>, '0305')
command! -range -nargs=0 Underline       call s:CombineSelection(<line1>, <line2>, '0332')
command! -range -nargs=0 DoubleUnderline call s:CombineSelection(<line1>, <line2>, '0333')
command! -range -nargs=0 Strikethrough   call s:CombineSelection(<line1>, <line2>, '0336')
" CombineSeleccion()
function! s:CombineSelection(line1, line2, cp)
    execute 'let char = "\u'.a:cp.'"'
    execute a:line1.','.a:line2.'s/\%V[^[:cntrl:]]/&'.char.'/ge'
endfunction

" GPG
" http://vim.wikia.com/wiki/Encryption
augroup encrypted
    au!
    autocmd BufReadPre,FileReadPre *.asc set viminfo=
    autocmd BufReadPre,FileReadPre *.asc set noswapfile noundofile nobackup
    autocmd BufWritePre,FileWritePre *.asc '[,']!gpg --default-recipient-self -ae 2>/dev/null
    autocmd BufWritePost,FileWritePost *.asc u
augroup END

" Folding (zo = open / zc = close)
" https://gist.github.com/lestoni/8c74da455cce3d36eb68
set nofoldenable
set foldlevel=0
set foldnestmax=10
set foldmethod=indent
highlight Folded cterm=NONE ctermbg=NONE ctermfg=241
nnoremap <expr> <F5> &foldlevel ? 'zM' :'zR'
nnoremap <space> za

" match the next brace
nnoremap <tab> %
vnoremap <tab> %
set wrap
set formatoptions=qrn1
set linebreak

" sorting words in line
function! SortInLine()
    call setline('.', join(sort(split(getline('.'), ' ')), " "))
endfunction

" Ignore case when completing file names and directories
set wildignorecase

" Ins-completion
set completeopt=longest,menuone

" Display output of shell commands in new window
" http://vim.wikia.com/wiki/Display_output_of_shell_commands_in_new_window
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
    echo a:cmdline
    let expanded_cmdline = a:cmdline
    for part in split(a:cmdline, ' ')
       if part[0] =~ '\v[%#<]'
          let expanded_part = fnameescape(expand(part))
          let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
       endif
    endfor
    botright new
    setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
    execute '$read !'. expanded_cmdline
    setlocal nomodifiable
    1
endfunction

" Gist
let g:gist_show_privates = 1
let g:gist_post_private = 1
let g:gist_detect_filetype = 1
let g:gist_clip_command = 'xclip -selection clipboard'

" GitGutter
let g:gitgutter_enabled = 0
let g:gitgutter_map_keys = 0
" Open the Sign Column and enable GitGutter
function! TurnGitGutterOnOff()
    if ( &signcolumn ==# 'no' || &signcolumn ==# 'auto' )
        set signcolumn=yes
        set updatetime=250
        GitGutterEnable
    else
        set signcolumn=no
        set updatetime=4000
        GitGutterDisable
    endif
endfunction
" TurnGitGutterOnOff()
noremap <silent> <F6> :call TurnGitGutterOnOff()<CR>

" Notes
let g:notes_directories = ['~/.vim/notes']
let g:notes_suffix = '.txt'

" Vundle begin
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'saltstack/salt-vim'
Plugin 'PotatoesMaster/i3-vim-syntax'
Plugin 'mattn/gist-vim'
Plugin 'Matt-Deacalion/vim-systemd-syntax'
Plugin 'wellle/targets.vim'
Plugin 'vim-scripts/nagios-syntax'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-notes'
call vundle#end()
filetype plugin indent on
